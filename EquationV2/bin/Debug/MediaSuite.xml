<?xml version="1.0"?>
<doc>
    <assembly>
        "MediaSuite"
    </assembly>
    <members>
        <member name="M:StreamCoders.Rtmp.RtmpPublish.PublishAudio(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Publishes an audio stream to the configured endpoint. The audio stream must be AAC.
</summary>
-------------------------------------------------------------------------------------------------			
</member>
        <member name="M:StreamCoders.Rtmp.RtmpPublish.PublishVideo(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Publishes a video stream to the configured endpoint. The video stream must be H.264.
</summary>
-------------------------------------------------------------------------------------------------			
</member>
        <member name="M:StreamCoders.Rtmp.RtmpPublish.StopPublish">
-------------------------------------------------------------------------------------------------
<summary>
	Gracefully stops publishing to endpoint.
</summary>
-------------------------------------------------------------------------------------------------			
</member>
        <member name="M:StreamCoders.Rtmp.RtmpPublish.StartPublish">
-------------------------------------------------------------------------------------------------
<summary>
	Starts publish to the configured endpoint. This function has to be called before PublishVideo or PublishAudio.
</summary>
-------------------------------------------------------------------------------------------------			
</member>
        <member name="M:StreamCoders.Rtmp.RtmpPublish.Init(StreamCoders.Rtmp.RtmpPublisherConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	When initializing all structures have to be filled except the optional credentials.
</summary>
-------------------------------------------------------------------------------------------------			
</member>
        <member name="T:StreamCoders.Rtmp.RtmpPublish">
-------------------------------------------------------------------------------------------------
<summary>
	RTMP publishing client. 
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.EchoCancellation.Cancellation(StreamCoders.MediaBuffer`1{System.Byte},StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Applies echo cancellation to sample data.
</summary><param name="microphoneInput">
	The local microphone input.
</param><param name="playbackData">
	The far-end playback data.
</param><returns>
	Returns sample data with echo cancellation applied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.EchoCancellation.Reset">
-------------------------------------------------------------------------------------------------
<summary>
	Resets the echo cancellation internal state.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.EchoCancellation.Init(StreamCoders.Wave.EchoCancellationConfig)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes echo cancellation.
</summary><param name="configuration">
	The configuration to use.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.EchoCancellation">
-------------------------------------------------------------------------------------------------
<summary>
	Acoustic Echo cancellation.
</summary><remarks>
Only 1 channel and 16-bit audio is currently supported.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.EchoCancellationConfig.TailLength">
-------------------------------------------------------------------------------------------------
<summary>
	The length of the filter in samples. 
</summary><value>
	The length of the filter.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.EchoCancellationConfig.FrameSize">
-------------------------------------------------------------------------------------------------
<summary>
	The exact number of samples fed from applications at each run.
</summary><value>
	The size of the input frame in samples.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.EchoCancellationConfig">
-------------------------------------------------------------------------------------------------
<summary>
	Echo cancellation configuration.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.LogFactory2">
            <summary>
Class LogFactory2 for arbitrary string names
</summary>
            <seealso cref="T:StreamCoders.LogFactoryBase" />
        </member>
        <member name="T:StreamCoders.LogFactory`1">
            <summary>
Class LogFactory.
</summary>
            <seealso cref="T:StreamCoders.LogFactoryBase" />
        </member>
        <member name="T:StreamCoders.LogFactoryBase">
            <summary>
Base class for logging from type T and an arbitrary string name
</summary>
        </member>
        <member name="M:StreamCoders.Encoder.AudioEncoderFactory.CreateEncoder(StreamCoders.Codec)">
-------------------------------------------------------------------------------------------------
<summary>
	Creates an audio encoder given the codec.
</summary><param name="codec">
	The codec.
</param><returns>
	Returns a newly created encoder object, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.AudioEncoderFactory">
-------------------------------------------------------------------------------------------------
<summary>
	Creates audio encoder objects based on given critera.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFGenerator.Generate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.UInt32,System.UInt32)">
-------------------------------------------------------------------------------------------------
<summary>
	Generates DTMF to a PCM stream.
</summary><param name="tone">	   	Possible characters are: 0-9, A-D, '*' and '#'. </param><param name="duration">	The duration in milliseconds of the generated signal. </param><param name="volume">  	Unsigned power level [0;63] Amp = 10^(volume/10) </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.DTMFGenerator.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Number of channels on the PCM stream. Currently this value has to be 1.
</summary><value>
	The channels.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.DTMFGenerator.BitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Bits per sample of the PCM stream. Currently this value has to be 16.
</summary><value>
	The bits per sample.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.DTMFGenerator.SampleFrequency">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the sample frequency of the PCM stream. Allowed values are: 8000, 16000.
</summary><value>
	The sample frequency.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFGenerator.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes DTMF Generator.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFGenerator.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFGenerator.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFGenerator.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Signals.DTMFGenerator">
-------------------------------------------------------------------------------------------------
<summary>
	Represents a DTMF Generator class for 16-bit PCM audio streams.
</summary><example><code>
	    class Modulator
	    {
	        public Modulator()
	        {
	            offset = 0;
	            q = new Queue&lt;byte[]&gt;();
	        }
	
	        ~Modulator()
	        {
	            q.Clear();
	        }
	
	        public void Add(byte[] buffer)
	        {
	            lock (q) { q.Enqueue(buffer); }
	        }
	
	        public byte[] Modulate(byte[] buffer)
	        {
	            if (q.Count == 0)
	                return buffer;
	            int bufferOff = 0;
	            byte[] modBuf = Peek();
	            while (bufferOff &lt; buffer.Length)
	            {
	                buffer[bufferOff++] += modBuf[offset++];
	                if (offset &gt;= modBuf.Length)
	                {
	                    lock (q) { q.Dequeue(); }
	                    offset = 0;
	                    if (q.Count == 0)
	                        break;
	                    modBuf = Peek();
	                }
	            }
	            return buffer;
	        }
	        private byte[] Peek()
	        {
	            lock (q) { return q.Peek(); }
	        }
	        private int offset;
	        Queue&lt;byte[]&gt; q;
	    }
	
	    class Program
	    {
	        static void Main(string[] args)
	        {
	            Modulator mod = new Modulator();
	
	            WaveOutput wout = new WaveOutput();
	            wout.BitsPerSample = 16;
	            wout.Channels = 1;
	            wout.SampleRate = 8000;
	            wout.Init();
	            wout.OpenDevice();
	
	            WaveInput win = new WaveInput();
	            win.BitsPerSample = 16;
	            win.Channels = 1;
	            win.SampleRate = 8000;
	            win.TransferBufferCount = 200;
	            win.TransferBufferSize = 8000 * 2 / 50;
	            win.Init();
	            win.OpenDevice();
	            win.Start();
	
	            DTMFGenerator tg = new DTMFGenerator();
	            tg.SampleFrequency = 8000;
	
	            bool res = tg.Init();
	
	            uint duration = 200;
	
	            Console.WriteLine("Enter 0-9, #, * ");
	            win.ClearBuffers();
	            while (true)
	            {
	                if (win.SamplesAvailable)
	                {
	                    byte[] inBuf = win.GetAllData();
	                    if (inBuf != null)
	                    {
	                        inBuf = mod.Modulate(inBuf);
	                        wout.Enqueue(inBuf);
	                    }
	
	                }
	                if (Console.KeyAvailable == false)
	                {
	                    System.Threading.Thread.Sleep(10);
	                    continue;
	                }
	
	                var ki = Console.ReadKey(false);
	                if (ki.Key == ConsoleKey.X || ki.Key == ConsoleKey.Escape)
	                    break;
	                byte[] buf = tg.Generate((sbyte)char.ToUpper(ki.KeyChar), duration, 6);
	
	                if (buf != null)
	                {
	                    Console.WriteLine("Generated {0} for {1} ({2} bytes)", ki.Key.ToString(), duration, buf.Length);
	                    mod.Add(buf);
	                }
	                else
	                    Console.WriteLine("not a dtmf tone");
	
	            }
	        }
	    }
	
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.Init(System.String)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes AVI class and creates filename for further processing.<br />
	Needs to be called before adding the tracks.
</summary><param name="filename">	[in,out] If non-null, filename of the file. </param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.EndTrack(StreamCoders.TrackInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Ends track in media file<br /></summary><param name="track">	[in,out] Ends a track previously created with AddTrack. </param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.WriteTrack(StreamCoders.TrackInfo,StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Overload. <br />
	Same as calling WriteTrack with KeyFrame parameter set to false.
</summary><param name="track">		[in,out] Pass the TrackInfo used in AddTrack. </param><param name="inputBuffer">
	[in,out] Pass MediaPackage containing buffer of frame to be written to specific track.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.AddTrack(StreamCoders.TrackInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Adds track to media file.<br /></summary><param name="track">	[in,out] If non-null, the track. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIWriter.#ctor">
            <summary>
Constructor
</summary>				
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Container.AVIWriter">
-------------------------------------------------------------------------------------------------
<summary>
	AVI File Writer Supported Video codecs: H.263, MPEG-4, H.264<br />
	Supported Audio codecs: MP3 (MP1L3)<br /></summary><example><code>
	AVIWriter writer = new AVIWriter();
	writer.Filename = "c:\\stuff\\avfile.avi";
	string fname = writer.Filename;
	writer.Init();
	
	TrackInfo vtrack = new TrackInfo();
	vtrack.TrackCategory = TrackCategories.VIDEO;
	vtrack.TrackType = TrackTypes.MPEG4V;
	vtrack.Video = new VideoTrack();
	vtrack.Video.Framerate = framerate;
	vtrack.Video.Width = width;
	vtrack.Video.Height = height;
	
	vtrack = writer.AddTrack(vtrack);
	
	TrackInfo atrack = new TrackInfo();
	atrack.TrackCategory = TrackCategories.AUDIO;
	atrack.TrackType = TrackTypes.MP3;
	atrack.Audio = new AudioTrack();
	atrack.Audio.Bitrate = audioBitrate;
	atrack.Audio.BitsPerSample = audioBitsPerSample;
	atrack.Audio.SampleFrequency = audioSampleFreq;
	atrack.Audio.BitsPerSample = audioBitsPerSample;
	atrack.Audio.Channels = audioChannels;
	
	atrack = writer.AddTrack(atrack);
	</code></example><seealso cref="T:StreamCoders.IWriter" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.H265Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	H.265 / HEVC decoder.
</summary><remarks>
Supports all Main profiles. 
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VideoDecoderFactory.CreateDecoder(StreamCoders.Codec)">
-------------------------------------------------------------------------------------------------
<summary>
	Creates a video decoder object based on codec enumeration value.
</summary><param name="codec">
	The codec to create.
</param><returns>
	Returns a newly created decoder object, otherwise null.
</returns><remarks>
Note that in case of an unknown codec, the function will return a <c>NullVideoDecoder</c> object.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VideoDecoderFactory.CreateDecoder(StreamCoders.TrackInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Creates a video decoder instance given a TrackInfo object.
</summary><param name="info">
	TrackInfo object from which to create a decoder from.
</param><returns>
	A newly created video decoder object.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.VideoDecoderFactory">
-------------------------------------------------------------------------------------------------
<summary>
	Creates video decoder objects based on given critera.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.AutomaticGainControl.Apply(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Applies AGC to an input signal.
</summary><param name="inputBuffer">
	[in,out] Buffer containing input signal. The length has to be modulo 8 = 0.
</param><returns>
	Returns newly created buffer with adjusted levels, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.AutomaticGainControl.GainLevel">
-------------------------------------------------------------------------------------------------
<summary>
	The maximum gain applied to a target signal.
</summary><value>
	The gain level.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.AutomaticGainControl.TargetLevel">
-------------------------------------------------------------------------------------------------
<summary>
	The requested level of the signal.
</summary><value>
	The target level.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.AutomaticGainControl.ThresholdLevel">
-------------------------------------------------------------------------------------------------
<summary>
	Lower threshold of application. If signal power falls below this threshold, then gain
	will not be applied.
</summary><value>
	The threshold level.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.AutomaticGainControl.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.AutomaticGainControl.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.AutomaticGainControl.Init">
            <summary>Initializes class for use.</summary>
            <returns>Always returns true.</returns>
-------------------------------------------------------------------------------------------------
<summary>
	Initialises this object.
</summary><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.AutomaticGainControl">
-------------------------------------------------------------------------------------------------
<summary>
	Provides Automatic Gain Control (AGC) feature.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFDetector.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFDetector.Detect(System.Byte[])">
-------------------------------------------------------------------------------------------------
<summary>
	Detect DTMF in a PCM Stream. Possible characters are: 0-9, A-D, '*' and '#'. The minimum
	duration for a tone to be detected is 40ms.
</summary><param name="buffer">
	[in,out] If non-null, the buffer.
</param><returns>
	Returns a String representing DTMF tones, otherwise String is empty.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.DTMFDetector.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Number of channels on the PCM stream. Currently this value has to be 1.
</summary><value>
	The channels.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.DTMFDetector.BitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Bits per sample of the PCM stream. Currently this value has to be 16.
</summary><value>
	The bits per sample.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.DTMFDetector.SampleFrequency">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the sample frequency of the PCM stream. Allowed values are: 8000, 16000.
</summary><value>
	The sample frequency.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFDetector.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes DTMF Detector.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFDetector.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.DTMFDetector.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Signals.DTMFDetector">
-------------------------------------------------------------------------------------------------
<summary>
	DTMF Detector class for 16-bit PCM audio streams.
</summary><remarks>
	See <c>DTMFDetectionSample</c> on how to use this class.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MPEG4Decoder.destruct">
-------------------------------------------------------------------------------------------------
<summary>
	Destructs this object.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MPEG4Decoder.Predict(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Tries to predict the picture type of an arbitrary frame.
</summary><param name="inputBuffer">	[in,out] The MPEG4.2 Frame to be processed. </param><returns>
	Returns I/P/B_Frame on success, otherwise <code>NO_FRAME</code>.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MPEG4Decoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes the content of the buffer into a uncompressed RGB24 frame. This may also contain
	timing information.
</summary><remarks>
	Not all input frames may deliver a picture immediately. Depending on the composition and
	frame type (B-Frames), frame decoding can be deferred to a later point in time.
</remarks><param name="inputBuffer">	[in,out] Video frame to decode. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MPEG4Decoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MPEG4Decoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MPEG4Decoder.#ctor">
            <summary>
Constructor.
</summary>				
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.MPEG4Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	MPEG-4.2 Decoder.<br />
	Streamcoders MPEG-4 Decoder is an ISO/IEC 14496-2 conforming decoder. <br /><list type="bullet"><listheader><description>Supported Features</description></listheader><item><description>Short video header</description></item><item><description>Data partitioning</description></item><item><description>Reversible VLC</description></item><item><description>Constant/Variable Bitrates</description></item><item><description>Interlacing</description></item><item><description>Quarter Pixel MC</description></item></list></summary><seealso cref="T:StreamCoders.Decoder.AVideoDecoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.ToneGenerator.Generate(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Generates a tone at a given frequency.
</summary><param name="frequency">	Frequency of the tone to be generated. </param><param name="duration"> 	The duration in milliseconds of the generated signal. </param><param name="volume">   	Unsigned power level [0;63] Amp = 10^(volume/10) </param><param name="phase">		Constant phase offset. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.ToneGenerator.Generate(System.UInt32,System.UInt32,System.UInt32)">
-------------------------------------------------------------------------------------------------
<summary>
	Generates a tone at a given frequency.
</summary><param name="frequency">	Frequency of the tone to be generated. </param><param name="duration"> 	The duration in milliseconds of the generated signal. </param><param name="volume">   	Unsigned power level [0;63] Amp = 10^(volume/10) </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.ToneGenerator.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Number of channels on the PCM stream. Currently this value has to be 1.
</summary><value>
	The channels.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.ToneGenerator.BitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Bits per sample of the PCM stream. Currently this value has to be 16.
</summary><value>
	The bits per sample.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Signals.ToneGenerator.SampleFrequency">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the sample frequency of the PCM stream. Allowed values are: 8000, 16000.
</summary><value>
	The sample frequency.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.ToneGenerator.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes Tone Generator.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.ToneGenerator.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.ToneGenerator.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Signals.ToneGenerator.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Signals.ToneGenerator">
-------------------------------------------------------------------------------------------------
<summary>
	Generates at a particular frequency.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.EncodeToBuffer(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Encodes an array of PCM data to the selected codec and stores it in a byte array.
	<br />
	Note: The size of the input data is dependent on the value of MaximumInputDataLength<br /></summary><param name="inputBuffer">	[in,out] If non-null, the buffer. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.EncodeToBuffer(System.Byte[],System.Int32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Encodes an array of PCM data to the selected codec and stores it in a byte array.
	<br />
	Note: The size of the input data is dependent on the value of MaximumInputDataLength<br /></summary><param name="buffer">	[in,out] If non-null, the buffer. </param><param name="offset">	[in,out] The offset into the buffer. </param><param name="count">	[in,out] The number of bytes to process. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.EncodeToFrame(System.Byte[])">
-------------------------------------------------------------------------------------------------
<summary>
	Encodes an array of PCM data to the selected codec and stores it in an RTP Frame.
	<br />
	Note: The size of the input data is dependent on the value of MaximumInputDataLength<br /></summary><param name="buffer">	[in,out] If non-null, the buffer. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.StreamType">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets or Sets the StreamType property.
</summary><value>
	This is currently only used for AMR-NB, to distinguish between raw and file storage
	format stream.
</value>

### <example><code>
				StreamCoders.Codec codec = StreamCoders.Codec.AMRNB;
				int samplerate = 8000;
				int bitrate = 10200;
	
				// Open default wavein
				WaveInput win = new WaveInput();
				win.BitsPerSample = 16;
				win.Channels = 1;
				win.SampleRate = samplerate;
				win.OpenDevice(null);
				win.Start();
	
				// Create G.711 alaw encoder
				SpeechEncoder enc = new SpeechEncoder();
				enc.InputBitsPerSample = 16;
				enc.InputChannels = 1;
				enc.InputSampleRate = samplerate;
				enc.SetCodec(codec);
				enc.OutputBitrate = bitrate;
				enc.PacketDuration = 20;
				enc.StreamType = StreamCoders.SpeechStreamType.StorageFormat;
				bool res = enc.Init();
				if(res == false)
				{
					return;
				}
	
				// Create G.711 alaw decoder
				SpeechDecoder dec = new SpeechDecoder();
				dec.Bitrate = bitrate;
				dec.StreamType = StreamCoders.SpeechStreamType.StorageFormat;
				dec.SetCodec(codec);
				res = dec.Init();
				if (res == false)
				{
					return;
				}
	
				// Open default waveout
				WaveOutput wout = new WaveOutput();
				wout.Channels = 1;
				wout.SampleRate = samplerate;
				wout.BitsPerSample = 16;
				wout.Init();
				wout.OpenDevice(null);
	
				int bytescollected = 0;
				win.ClearBuffers();
				while (true)
				{
					// is data available from device
					if (win.SamplesAvailable == true)
					{
						// get all queued data
						byte[] samples = win.GetAllData();
						bytescollected += samples.Length;
						// encode data to g.711 byte stream
						byte[] g711bytes = enc.EncodeToBuffer(samples);
						if (g711bytes != null)
						{
							// decode byte stream
							byte[] raw = dec.Decode(g711bytes);
							// output to sound device and enjoy the echo
							wout.Enqueue(raw);
						}
					}
				}
	
			}
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.PayloadType">
-------------------------------------------------------------------------------------------------
<summary>
	Set/Get Payload Type of produced RTP packets.
</summary><value>
	The type of the payload.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.PacketDuration">
-------------------------------------------------------------------------------------------------
<summary>
	Set/Get maximum packet duration. After calling SetCodec the PacketDuration will have it's
	default value depending on the codec selected.
</summary><value>
	The packet duration.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.OutputBitrate">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the output bitrate of the codec. Default: 64000.
</summary><value>
	The output bitrate.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.MaximumInputDataLength">
-------------------------------------------------------------------------------------------------
<summary>
	Set/Get the maximum size of the input data in bytes that can be encoded at once.
	<br /></summary><remarks>
	Must be set before initializing encoder.
</remarks><value>
	The length of the maximum input data.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.InputChannels">
-------------------------------------------------------------------------------------------------
<summary>
	Set the number of channels the input PCM stream contains. If the channels are greater
	than 1, then the channels will be merged.
</summary><value>
	The input channels.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.InputBitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Set the size of each sample in bits of the input stream. Default: 16.
</summary><value>
	The input bits per sample.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.SpeechEncoder.InputSampleRate">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the input sample rate of the PCM stream. In all cases it must be a valid
	samplerate used by the selected codec.
</summary><value>
	The input sample rate.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.GetCodec">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the codec.
</summary><returns>
	The codec.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.SetCodec(StreamCoders.Codec)">
-------------------------------------------------------------------------------------------------
<summary>
	Sets the Codec the data will be encoded to. This function also set the correct packet
	duration for the codec.
</summary><param name="codec">
	The codec.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the SpeechEncoder.
</summary><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.SpeechEncoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.SpeechEncoder">
-------------------------------------------------------------------------------------------------
<summary>
	SpeechEncoder handles the encoding of speech audio frames.
</summary><remarks><para>SpeechEncoder handles 16-bit sample sizes and 1 channel.</para><para>Supported codecs are:</para><list type="bullet"><item>G711A</item><item>G711U</item><item>G722</item><item>G722SB</item><item>G723</item><item>G726</item><item>G728</item><item>G729A</item><item>AMRNB</item><item>AMRWB</item><item>AMRWBE</item><item>SPEEX NB</item><item>SPEEX WB</item></list><para /><para>SpeechEncoder is able to produce raw and RTP streams.<br /></para></remarks><seealso cref="T:StreamCoders.Encoder.ISpeechEncoder" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="E:RtmpPlay.OnSamplesAvailable">
-------------------------------------------------------------------------------------------------
<summary>
	Event that is raised whenever a sample is available. Events and polling (GetNextSamples)
	cannot be mixed.
</summary><remarks>
The event must be added before the <c>Start</c> method is called.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.APVideoEncoderBase.LastEncodedFrameType">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the FrameType of the most recently encoded Frame.
</summary><value>
	The type of the last encoded frame.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.APVideoEncoderBase.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.APVideoEncoderBase">
-------------------------------------------------------------------------------------------------
<summary>
	Abstract base class for all video encoders. 
</summary><seealso cref="T:StreamCoders.Encoder.AVideoEncoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.FindDeviceByIndex(System.UInt32)">
-------------------------------------------------------------------------------------------------
<summary>
	Find audio Device provided its unique device index.
</summary><param name="index">	[in,out] The index of the audio device. </param><returns>
	If successful returns AudioDeviceInfo class, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.FindDeviceByName(System.String)">
-------------------------------------------------------------------------------------------------
<summary>
	Find audio Device provided its name.
</summary><param name="deviceName">	[in,out] The name of the audio device. </param><returns>
	If successful returns AudioDeviceInfo class, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.Devices">
-------------------------------------------------------------------------------------------------
<summary>
	Gets all available audio output devices. This includes the default device mapper in position zero.
</summary><value>
	The devices.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.ConstantTimeOffset">
-------------------------------------------------------------------------------------------------
<summary>
	A constant time offset added to <c>CurrentTimeOffset</c>. This is useful when seeking in a stream.
</summary><value>
	A time value in seconds.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.QueuedSamplesInSeconds">
-------------------------------------------------------------------------------------------------
<summary>
	Returns the number of seconds already queued up to be played.
</summary><value>
	The queued samples in seconds.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.QueuedSamples">
-------------------------------------------------------------------------------------------------
<summary>
	Returns the number of samples queued for playing on the audio device.
</summary><value>
	The queued samples.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.QueuedBytes">
-------------------------------------------------------------------------------------------------
<summary>
	Returns the number of bytes queued for playing on the audio device.
</summary><value>
	The queued bytes.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.CurrentTimeOffset">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the total time played (in seconds) on the audio device.
</summary><value>
	The current time offset.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.CurrentSampleOffset">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the the total number of samples played on the audio device.
</summary><value>
	The current sample offset.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.Capabilities">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the Device capabilities.
</summary><value>
	Returns a structure containing indicators whether certain features are supported by the
	waveout device.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.PlaybackRate">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the Playback rate.
</summary><remarks>
	Not all devices support this feature. Check <c>Capabilities</c> property for indication.
</remarks><value>
	The rate is specified as a fixed-point value. The high-order word contains the signed
	integer part of the number, and the low-order word contains the fractional part. A value
	of 0x8000 in the low-order word represents one-half, and 0x4000 represents one-quarter.
	For example, the value 0x00010000 specifies a multiplier of 1.0 (no playback rate change),
	and a value of 0x000F8000 specifies a multiplier of 15.5.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.Pitch">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the Pitch.
</summary><remarks>
	Not all devices support this feature. Check <c>Capabilities</c> property for indication.
</remarks><value>
	The pitch multiplier is specified as a fixed-point value. The high-order word contains
	the signed integer part of the number, and the low-order word contains the fractional
	part. A value of 0x8000 in the low-order word represents one-half, and 0x4000 represents
	one-quarter. For example, the value 0x00010000 specifies a multiplier of 1.0 (no pitch
	change), and a value of 0x000F8000 specifies a multiplier of 15.5.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.Volume">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the Volume.
</summary><remarks>
	Not all devices support this feature. Check <c>Capabilities</c> property for indication.
</remarks><value>
	The low-order word contains the left-channel volume setting, and the high-order word
	contains the right-channel setting. A value of 0xFFFF represents full volume, and a value
	of 0x0000 is silence. If a device does not support both left and right volume control,
	the low-order word of dwVolume specifies the volume level, and the high-order word is
	ignored.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.BitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the Bits per sample.
</summary><value>
	The bits per sample.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.SampleRate">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the Sample rate.
</summary><value>
	The sample rate.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.ChannelMask">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the channel mask present in the multichannel stream. Audio interleave
	channel numbers start from lowest to highest value in channel mask bit-flags. (Stereo:
	Interleave 0 -&gt; Left (0x1), Interleave 1 -&gt; Right (0x2))
</summary><value>
	Default value is <c>Speaker_Default</c> for default arrangement.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutput.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the number of channels.
</summary><value>
	The channels.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.UnprepareBuffers">
-------------------------------------------------------------------------------------------------
<summary>
	Unprepares internally allocated buffers. This function can be called to remove memory
	pressure, if large chunk(s) of audio data have been enqueued.
</summary><remarks>
	UnprepareBuffers is also internally called by Enqueue but not by other methods. It must
	be called before getting accurate results from <c>QueuedBytes</c>, <c>QueuedSamples</c>
	or <c>QueuedSamplesInSeconds</c>.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Enqueue(System.Byte[])">
-------------------------------------------------------------------------------------------------
<summary>
	Queues sample data to be processed through the audio device.
</summary><param name="buffer">	[in,out]. </param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Enqueue(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Queues sample data to be processed through the audio device.
</summary><param name="mp">	[in,out] MediaPackage containing sample data and timing information. </param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes WaveOutput object.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Resume">
-------------------------------------------------------------------------------------------------
<summary>
	Resume playback.
</summary><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Pause">
-------------------------------------------------------------------------------------------------
<summary>
	Pause playback.
</summary><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.ResetDevice">
-------------------------------------------------------------------------------------------------
<summary>
	Resets the device and clears all buffers.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.CloseDevice">
-------------------------------------------------------------------------------------------------
<summary>
	Close previously opened device.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.OpenDevice(StreamCoders.Devices.AudioDeviceInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Opens an audio output device.
</summary><param name="DeviceInfo">	[in,out] <c>AudioDeviceInfo</c> describing audio device. </param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.OpenDevice(System.String)">
-------------------------------------------------------------------------------------------------
<summary>
	Opens an audio output device.
</summary><param name="DeviceName">	[in,out] Name of device to open. </param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.OpenDevice">
-------------------------------------------------------------------------------------------------
<summary>
	Opens default Wave-Out device.
</summary><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finalizer.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutput.#ctor">
            <summary>
Constructor
</summary>				
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.WaveOutput">
-------------------------------------------------------------------------------------------------
<summary>
	Represents the default audio output device.
</summary><example><code>
	WaveOutput wout = new WaveOutput();
	wout.BitsPerSample = audioBitsPerSample;
	wout.Channels = audioChannels;
	wout.SampleRate = audioSampleFreq;
	wout.Init();
	wout.OpenDevice();
	
	WaveInput win = new WaveInput();
	win.BitsPerSample = audioBitsPerSample;
	win.Channels = audioChannels;
	win.SampleRate = audioSampleFreq;
	win.Init();
	win.OpenDevice();
	win.Start();
	
	while(true)
	{
		if (win.SamplesAvailable)
		{
			byte[] samples = win.GetAllData();
			wout.Enqueue(samples);
		}
	}
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutDeviceCapabilities.PlaybackRate">
-------------------------------------------------------------------------------------------------
<summary>
	Indicates whether playback rate adjustments are supported.
</summary><value>
	true if playback rate, false if not.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutDeviceCapabilities.Pitch">
-------------------------------------------------------------------------------------------------
<summary>
	Indicates whether Pitch adjustments are supported.
</summary><value>
	true if pitch, false if not.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveOutDeviceCapabilities.Volume">
-------------------------------------------------------------------------------------------------
<summary>
	Indicates whether Volume adjustments are supported.
</summary><value>
	true if volume, false if not.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveOutDeviceCapabilities.#ctor(System.Boolean,System.Boolean,System.Boolean)">
-------------------------------------------------------------------------------------------------
<summary>
	Constructor.
</summary><param name="Volume">	   	true to volume. </param><param name="Pitch">	   	true to pitch. </param><param name="PlaybackRate">	true to playback rate. </param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.WaveOutDeviceCapabilities">
-------------------------------------------------------------------------------------------------
<summary>
	Contains the capabilities the wave output device supports. Currently this is Volume,
	Pitch and PlaybackRate.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.Close">
-------------------------------------------------------------------------------------------------
<summary>
	Closes this object.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.GetAllDataRaw">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves and concatenates all sample blocks available.
</summary><returns>
	null if it fails, else all data.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.GetNextDataRaw">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves the next sample block.
</summary><returns>
	null if it fails, else the next data.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.GetNextSamples">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the next samples in the wave input devices queue. Calling this method and events
	cannot be mixed.
</summary><returns>
	null if it fails, else the next samples.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.FindDeviceByName(System.String)">
-------------------------------------------------------------------------------------------------
<summary>
	Find audio Device provided its name.
</summary><param name="deviceName">	[in,out] The name of the Audio Device. </param><returns>
	If successful returns AudioDeviceInfo class, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.Devices">
-------------------------------------------------------------------------------------------------
<summary>
	Gets all available audio input devices. This includes the default device mapper in position zero.
</summary><value>
	The devices.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.SetTransferBufferSizeMilliseconds(System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Sets transfer buffer size given milliseconds using Formula: SR * CH * BPS * milliseconds / 1000.<br />
	This function must be called after setting SampleRate, Channels and BitsPerSample, but
	before Init().
</summary><param name="milliseconds">
	The milliseconds. Must be less or equal 1000.
</param><returns>
	Returns the calculated transfer buffer size.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.WaitSamplesAvailable(System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Uses internal semaphore to wait for samples to become available.
</summary><param name="milliseconds">
	Time in milliseconds to wait before returning. (let infinity = -1)
</param><returns>
	Returns true if samples are available, otherwise false.
</returns><example><code>
	                // is data available from device
	                if (win.WaitSamplesAvailable(-1) == true)
	                {
	                    byte[] samples = win.GetNextSamples();
	
	                    RTPFrame f = enc.EncodeToFrame(samples);
	                    if (f != null)
	                    {
	                        byte[] framebytes = dec.Decode(f);
	                        wout.Enqueue(framebytes);
	
	                    }
	                }
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.TransferBufferCount">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the number of Transfer buffers. <br /></summary><remarks>
	Stepping into an application with delay of execution, can cause data bursts from the
	device and faulty information to be transferred to the application, because of the
	limited amount and circular nature of transfer buffers.
</remarks><value>
	The amount of transfer buffers used. Default: 50.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.TransferBufferSize">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the size of each of the buffers used to transfer data from the sound device
	to the application.<br /></summary><remarks>
	If set to 0, WaveInput will create 10 millisecond buffers. <br />
	Stepping into an application with delay of execution, can cause data bursts from the
	device and faulty information to be transferred to the application, because of the
	limited amount and circular nature of transfer buffers.
</remarks><value>
	The delay in readiness of data is directly proportional to the size of the buffer.<br />
	Meaning: The smaller the buffer, the sooner data is made available to the
	application.<br />
	Adjustments must be made before calling <c>Start()</c>.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.BytesAvailable">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the BytesAvailable property.
</summary><value>
	Returns the number of bytes stored in the output queue.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.SamplesAvailable">
-------------------------------------------------------------------------------------------------
<summary>
	Indicates whether audio samples are enqueued and ready to be read.
</summary><value>
	true if samples available, false if not.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.BitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the Bits per sample.
</summary><value>
	The bits per sample.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.SampleRate">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the Sample rate.
</summary><value>
	The sample rate.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.ChannelMask">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the channel mask present in the multichannel stream. Audio interleave
	channel numbers start from lowest to highest value in channel mask bit-flags. (Stereo:
	Interleave 0 -&gt; Left (0x1), Interleave 1 -&gt; Right (0x2))
</summary><value>
	Default value is <c>Speaker_Default</c> for default arrangement.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.WaveInput.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the number of channels.
</summary><value>
	The channels.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.ClearBuffers">
-------------------------------------------------------------------------------------------------
<summary>
	Removes all pending buffers from the audio device. <br />
	This call is functionally equivalent to calling SamplesAvailable and GetAllData, but is
	more efficient.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.Stop">
-------------------------------------------------------------------------------------------------
<summary>
	Stop recording and queueing data.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.Start">
-------------------------------------------------------------------------------------------------
<summary>
	Start recording and queueing data.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.CloseDevice">
-------------------------------------------------------------------------------------------------
<summary>
	Close previously opened device<br />
	Should be called after calling Stop()
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.OpenDevice(StreamCoders.Devices.AudioDeviceInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Opens an audio input device.
</summary><param name="DeviceInfo">	[in,out] <c>AudioDeviceInfo</c> describing audio device. </param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.OpenDevice(System.String)">
-------------------------------------------------------------------------------------------------
<summary>
	Opens an audio input device.
</summary><param name="DeviceName">	[in,out] Name of device to open. </param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.OpenDevice">
-------------------------------------------------------------------------------------------------
<summary>
	Open default audio input device.
</summary><returns>
	Returns true on success. Returns false if already open.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes WaveInput object.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.WaveInput.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="E:StreamCoders.Wave.WaveInput.OnSamplesAvailable">
-------------------------------------------------------------------------------------------------
<summary>
	Event that is raised whenever a sample is available. Events and polling (GetNextSamples)
	cannot be mixed.
</summary><remarks>
The event must be added before the <c>Start</c> method is called.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.WaveInput">
-------------------------------------------------------------------------------------------------
<summary>
	Represents a wave input device.
</summary><example><code>
	WaveOutput wout = new WaveOutput();
	wout.BitsPerSample = audioBitsPerSample;
	wout.Channels = audioChannels;
	wout.SampleRate = audioSampleFreq;
	wout.Init();
	wout.OpenDevice();
	
	WaveInput win = new WaveInput();
	win.BitsPerSample = audioBitsPerSample;
	win.Channels = audioChannels;
	win.SampleRate = audioSampleFreq;
	win.Init();
	win.OpenDevice();
	win.Start();
	
	while(true)
	{
		if (win.SamplesAvailable)
		{
			byte[] samples = win.GetAllData();
			wout.Enqueue(samples);
		}
	}
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.WaveInputEventArgs">
-------------------------------------------------------------------------------------------------
<summary>
	Event arguments containing samples produced by WaveInput.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Imaging.AdaptiveDenoiseFilter.BlurMethod">
-------------------------------------------------------------------------------------------------
<summary>
	The blur method to use.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Imaging.AdaptiveDenoiseFilter.Threshold">
-------------------------------------------------------------------------------------------------
<summary>
	Threshold determines when a pixel is considered noise. If the difference between compared pixels is below threshold it is considered noise.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.AdaptiveDenoiseFilter.Apply(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Applies filter to image. Since the algorithm use is temporal of nature there is a 3 picture delay before results can be consumed. 
</summary><param name="InputBuffer">
	Buffer containg image. 
</param><returns>
	Returns newly created buffer with filters applied, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Imaging.AdaptiveDenoiseFilter">
-------------------------------------------------------------------------------------------------
<summary>
	Provides various methods to attempt noise reduction in images. The algorithm uses both
	spatial and temporal information.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Imaging.AdaptiveBlurMethod">
-------------------------------------------------------------------------------------------------
<summary>
	various blur methods that attempt to reduce noise in images.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="F:StreamCoders.Imaging.AdaptiveBlurMethod.Method3">
            <summary>
	Uses previous and next result to calculate the current pixel.
</summary>
        </member>
        <member name="F:StreamCoders.Imaging.AdaptiveBlurMethod.Method2">
            <summary>
	Uses previous pixel and next result of calcuation to calculate the current pixel.
</summary>
        </member>
        <member name="F:StreamCoders.Imaging.AdaptiveBlurMethod.Method1">
            <summary>
	Uses previous results of calculation and next pixel to calculate the current pixel.
</summary>
        </member>
        <member name="F:StreamCoders.Imaging.AdaptiveBlurMethod.Method0">
            <summary>
	Uses previous and next pixel to calculate current pixel.
</summary>
        </member>
        <member name="M:StreamCoders.Imaging.ImageTools.Transpose(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Transposes a PictureMediaBuffer. Supported pixel formats are RGB-24 and RGB-32.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.TransposeRgb32(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Transposes a PictureMediaBuffer containing RGBA data.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.TransposeRgb24(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Transposes a PictureMediaBuffer containing RGB-24 data.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.TransposeGray8(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Transposes a PictureMediaBuffer containing Grayscale data.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rotate(StreamCoders.PictureMediaBuffer,System.Double)">
-------------------------------------------------------------------------------------------------
<summary>
	Rotates a PictureMediaBuffer arounds its center coordinates. Note this function does not resize the resulting PictureMediaBuffer.  Supported pixel formats are RGB-24 and RGB-32.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><param name="angle">
	[in] Angle of rotation.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.RotateRgb32(StreamCoders.PictureMediaBuffer,System.Double)">
-------------------------------------------------------------------------------------------------
<summary>
	Rotates a PictureMediaBuffer arounds its center coordinates. Note this function does not resize the resulting PictureMediaBuffer.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><param name="angle">
	[in] Angle of rotation.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.RotateRgb24(StreamCoders.PictureMediaBuffer,System.Double)">
-------------------------------------------------------------------------------------------------
<summary>
	Rotates a PictureMediaBuffer arounds its center coordinates. Note this function does not resize the resulting PictureMediaBuffer.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><param name="angle">
	[in] Angle of rotation.
</param><returns>
	The resulting PictureMediaBuffer object or null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb24ToBitmap(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a PictureMediaBuffer to an RGB 24-bit Bitmap (System.Drawing.Imaging.Bitmap)
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	A Bitmap instance.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.BitmapToRgb32(System.Drawing.Bitmap)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a 24-bit/32-bit bitmap to PictureMediaBuffer of type Rgb32. The alpha value will default to 255.
</summary><param name="inputBuffer">
	Must contain a 24-bit or 32-bit System.Drawing.Bitmap.
</param><returns>
	null if it fails, else the converted image.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.BitmapToRgb24(System.Drawing.Bitmap)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a 24-bit/32-bit bitmap to PictureMediaBuffer of type Rgb24.
</summary><param name="inputBuffer">
	Must contain a 24-bit or 32-bit System.Drawing.Bitmap.
</param><returns>
	null if it fails, else the converted image.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb24ToBitmap(StreamCoders.MediaBuffer`1{System.Byte},System.Int32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a MediaBuffer to an RGB 24-bit Bitmap (System.Drawing.Imaging.Bitmap)
</summary><param name="input">
	[in,out] If non-null, the input.
</param><param name="width">
	The width.
</param><param name="height">
	The height.
</param><returns>
	A Bitmap instance.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayWeightedSum(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer,System.Single)">
-------------------------------------------------------------------------------------------------
<summary>
	Calculates weighted sum where (BufferX1 * alpha) + (BufferX2 * (1-alpha)). The result of
	the function is stored in BufferX2.
</summary><param name="BufferX1">
	Buffer containing gray scale picture.
</param><param name="BufferX2">
	Buffer containing gray scale picture.
</param><param name="alpha">
	The alpha value has to be between 0.0 and 1.0.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayMedian(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies 3x3 median filter on a 8-bit gray scale image.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	null if it fails, else the a newly created image with the filter applied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb24Median(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies 3x3 median filter on an RGB-24 image.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	null if it fails, else the a newly created image with the filter applied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayPrewittVertical(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies vertical Prewitt filter on a 8-bit gray scale image. The kernel size is 3x3.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	null if it fails, else the a newly created image with the filter applied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayPrewittHorizontal(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies horizontal Prewitt filter on a 8-bit gray scale image. The kernel size is 3x3.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	null if it fails, else the a newly created image with the filter applied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GraySobelVertical(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies vertical Sobel filter on a 8-bit gray scale image. The kernel size is 3x3.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	null if it fails, else the a newly created image with the filter applied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GraySobelHorizontal(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies horizontal Sobel filter on a 8-bit gray scale image. The kernel size is 3x3.
</summary><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayGaussBlur3x3(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies 3x3 Gaussian blur on a 8-bit gray scale image.
</summary><param name="inputBuffer">
	Buffer containing original picture.
</param><returns>
	Returns a new buffer containing blurred image.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayDilation(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Dilates a gray scale picture using a 3x3 kernel matrix.
</summary><param name="inputBuffer">
	[in,out] Buffer containing gray scale picture.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayErosion(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Applies erosion on a 8-bit gray scale image.
</summary><param name="InputBuffer">
	[in,out] Buffer containing gray scale picture.
</param>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.AbsoluteDifferenceRgb24(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Calculates the absolute difference between two 24-bit images.
</summary><param name="BufferX1">
	Buffer containing gray scale picture.
</param><param name="BufferX2">
	Buffer containing gray scale picture.
</param><param name="OutputBuffer">
	[in,out] Result of absolute difference operation. The buffer must be pre-allocated.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.AbsoluteDifferenceGray8(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Calculates absolute difference  abs(X1(ij) - X2(ij)) between two gray scale images.
</summary><param name="BufferX1">
	[in,out] Buffer containing gray scale picture.
</param><param name="BufferX2">
	[in,out] Buffer containing gray scale picture.
</param><param name="OutputBuffer">
	[in,out] Result of absolute difference operation. The buffer must be pre-allocated.
</param>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayThreshold(StreamCoders.PictureMediaBuffer,System.Byte,System.Byte,StreamCoders.Imaging.CompareMethod)">
-------------------------------------------------------------------------------------------------
<summary>
	Sets pixels to a new value when they are greater than a threshold value.
</summary><param name="inputBuffer">
	[in,out] Input buffer containing 8-bit gray scale image.
</param><param name="threshold">
	The threshold.
</param><param name="newValue">
	The new value to assign when threshold is reached.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayThreshold(StreamCoders.PictureMediaBuffer,System.Byte)">
-------------------------------------------------------------------------------------------------
<summary>
	Sets pixels to 0 when they are greater than a threshold value.
</summary><param name="inputBuffer">
	[in,out] Input buffer containing 8-bit gray scale image.
</param><param name="threshold">
	The threshold.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.GrayToRgb24(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts an 8-bit gray scale image to a 24-bit image.
</summary><param name="inputBuffer">
	Input buffer containing 8-bit gray scale image.
</param><param name="outputBuffer">
	[in,out] Pre-allocated buffer required for RGB-24 image.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.YUY2ToRgb24(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a YUY2 composite to RGB-24 bit image.
</summary><param name="inputBuffer">
	Input buffer containing YUY2 composite image.
</param><param name="outputBuffer">
	[in,out] Pre-allocated buffer required for 24-bit image.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb16_565_ToRgb24(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a 16-bit RGB-565 image to RGB-24 bit image.
</summary><param name="inputBuffer">
	Input buffer containing RGB-565 image.
</param><param name="outputBuffer">
	[in,out] Pre-allocated buffer required for 24-bit image.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb24ToGray(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a RGB-24 bit image to 8-bit gray scale.
</summary><param name="inputBuffer">
	Input buffer containing RGB-24 image.
</param><param name="outputBuffer">
	[in,out] Pre-allocated buffer required for 8-bit gray scale image.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb24ToRgb32(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a raw RGB-24 bitmap to RGB-32.
</summary><param name="inputBuffer">
	Input buffer containing RGB-24 image.
</param><param name="outputBuffer">
	[in,out] Pre-allocated buffer required for RGB-32 image.
</param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Rgb32ToRgb24(StreamCoders.PictureMediaBuffer,StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Converts a raw RGB-32 bitmap to RGB-24.
</summary><param name="inputBuffer">
	Input buffer containing RGB-32 image.
</param><param name="outputBuffer">
	[in,out] Pre-allocated buffer required for RGB-24 image.
</param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.MirrorRgb32(StreamCoders.PictureMediaBuffer,StreamCoders.Imaging.MirrorAxis)">
-------------------------------------------------------------------------------------------------
<summary>
	Mirrors a 32-bit RGBA picture.
</summary><param name="inputBuffer">
	[in,out] Width of picture.
</param><param name="Axis">
	Axis to mirror around.
</param><returns>
	Returns true on success, otherwise false.
</returns>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.MirrorRgb24(StreamCoders.PictureMediaBuffer,StreamCoders.Imaging.MirrorAxis)">
-------------------------------------------------------------------------------------------------
<summary>
	Mirrors a 24-bit RGB picture.
</summary><param name="inputBuffer">
	[in,out] Width of picture.
</param><param name="Axis">
	Axis to mirror around.
</param><returns>
	Returns true on success, otherwise false.
</returns>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.Resize(StreamCoders.PictureMediaBuffer,System.Int32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Resizes a 24-bit or 32-bit RGB picture.
</summary><param name="inputBuffer">
	[in,out] Buffer containing original picture.
</param><param name="OutputWidth">
	New width.
</param><param name="OutputHeight">
	New height.
</param><returns>
	Returns a new buffer containing the resized image.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.ResizeRgb32(StreamCoders.PictureMediaBuffer,System.Int32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Resizes a 32-bit RGB picture.
</summary><param name="inputBuffer">
	[in,out] Buffer containing original picture.
</param><param name="OutputWidth">
	New width.
</param><param name="OutputHeight">
	New height.
</param><returns>
	Returns a new buffer containing the resized image.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.ResizeRgb24(StreamCoders.PictureMediaBuffer,System.Int32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Resizes a 24-bit RGB picture.
</summary><param name="inputBuffer">
	[in,out] Buffer containing original picture.
</param><param name="OutputWidth">
	New width.
</param><param name="OutputHeight">
	New height.
</param><returns>
	Returns a new buffer containing the resized image.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Imaging.ImageTools.#cctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Imaging.ImageTools">
-------------------------------------------------------------------------------------------------
<summary>
	Provides tools for image manipulation and color space conversion.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Imaging.MirrorAxis">
-------------------------------------------------------------------------------------------------
<summary>
	Values that represent around which axis an image is mirrored.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VC1Decoder.Predict(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Attempts to predict the frame type by finding the start-code and looking at the NAL unit type.
</summary><param name="inputBuffer">	Input buffer. </param><returns>
	Returns the frame type or NO_FRAME if not found.
</returns><remarks>
The function limits search to the first 20 bytes of a buffer. <br />
If there are multiple NALs passed, then only the first will be identified.
In order to identify all NALs, use H264Transform.ExtractNals to split them into separate buffers first.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VC1Decoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes the content of the buffer into a uncompressed RGB24 frame. This may also contain
	timing information.
</summary><remarks>
	Not all input frames may deliver a picture immediately. Depending on the composition and
	frame type (B-Frames), frame decoding can be deferred to a later point in time.
</remarks><param name="inputBuffer">	[in,out] If non-null, the media pack. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VC1Decoder.Init(StreamCoders.Decoder.VideoDecoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the decoder.
</summary><returns>
	Returns an updated version of the VideoDecoderConfiguration object.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VC1Decoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VC1Decoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.VC1Decoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.VC1Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	VC-1 video decoder.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDeviceSelectionForm.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:StreamCoders.Devices.VideoCaptureDeviceSelectionForm.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:StreamCoders.Devices.VideoCaptureDeviceSelectionForm.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="T:StreamCoders.Devices.VideoCaptureDeviceSelectionForm">
            <summary>
Summary for VideoCaptureDeviceSelectionForm
</summary>
        </member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.ShowSelectionDialog">
-------------------------------------------------------------------------------------------------
<summary>
	Shows a modal device and format selection form, that creates the video capture device for the user.
</summary><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.VideoCaptureDevice.IsDeviceLost">
-------------------------------------------------------------------------------------------------
<summary>
	Detects whether a capture device is lost during operation. This can happen if a capture
	device is physically disconnected.
</summary><remarks>
	The device should be stopped after this property evaluates to true and rediscovered with
	GetDeviceList.
</remarks><value>
	true if this object is device lost, false if not.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.VideoCaptureDevice.LastError">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the last error.
</summary><value>
	The last error.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.VideoCaptureDevice.BasicMode">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the mode of the VideoCaptureDevice object.
</summary><value>
	When in Basic Mode it is ensured that only metrics compatible to other MediaSuite
	components will be returned from <c>SelectDevice</c>.<br />
	SelectedFormat other than 24-bit will not be returned. (Currently the only restriction) <br />
	Default: true.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.GetFrame">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves a raw frame containing timing information of capture (MediaBuffer.startTime)
	and duration based on the FPS of the selected profile (MediaBuffer.EndTime). The timing
	information is relative to the time VideoCaptureDevice.Start was called.
</summary><returns>
	Returns a MediaPackage object containing a raw picture and timing information.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.VideoCaptureDevice.SelectedDevice">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves the currently selected capture device. This property is set when SelectDevice
	is called successfully.
</summary><value>
	The selected device.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.VideoCaptureDevice.SelectedFormat">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves the metrics of the device.
	<br />
	Currently these values are only valid after starting the device.
</summary><value>
	Retrieves the metrics of the device.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.Stop">
-------------------------------------------------------------------------------------------------
<summary>
	Stop Capture from device.
	<br /></summary><remarks>
Note that calling Stop() from the same thread as OnSampleAvailable will lead to a deadlock.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.Start">
-------------------------------------------------------------------------------------------------
<summary>
	Start the capturing process from the selected Device Name.
	<br /></summary><returns>
	Returns true on success, otherwise false. False can indicate that the device in incompatible or is already started. 
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.SelectCaptureDeviceFormat(StreamCoders.Devices.VideoCaptureDeviceFormat)">
-------------------------------------------------------------------------------------------------
<summary>
	Select metrics for a previously selected device.
</summary><param name="metrics">
	[in,out] Pass <c>VideoCaptureDeviceFormat</c> previously returned by <c>SelectDevice</c></param><returns>
	Returns true of metrics are supported, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.SelectDevice(StreamCoders.Devices.VideoCaptureDeviceInformation)">
-------------------------------------------------------------------------------------------------
<summary>
	Selects a capture device to be used and returns metrics of that device.
</summary><param name="device">	A <b>CaptureDeviceInformation</b> object returned by <c>GetDeviceList</c></param><returns>
	Returns a list of metrics supported by the device.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.VideoCaptureDevice.Devices">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves a String readable list of all available and compatible Capture Devices on the
	System.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.VideoCaptureDevice.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="E:StreamCoders.Devices.VideoCaptureDevice.OnSampleAvailable">
-------------------------------------------------------------------------------------------------
<summary>
	Event that is raised whenever a sample is available. Events and polling (GetNextSamples)
	cannot be mixed.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Devices.VideoCaptureDevice">
            <summary>
	This class represents a simple interface to capture devices. It can be used to retrieve
	pictures from these devices.<br />
	Supported features:
	
	<list type="bullet"><item>Enumerating Captures device located on
	system</item><item>Setting Resolution and framerate of Video</item><item>Retrieving
	frames from capture devices</item><item>Class instances are reusable.</item><item>It is
	possible to select and configure another device while a VideoCaptureDevice is running. To
	make the new configuration active Stop and Start has to be executed.</item></list></summary>
            <remarks>
	Using VideoCaptureDevice:

	<list type="bullet"><item>Enumerate
	Devices</item><item>SelectDevice</item><item>SelectCaptureDeviceFormat</item><item>Start</item><item>Use
	device by capturing
	images</item><item>Stop</item><item>Dispose</item></list><para /><para>Video capture
	devices can only be started once on a system. To re-use a VideoCaptureDevice the
	CaptureDeviceMulticastProvider can help provide multiple streams from a capture device in
	a single process.</para></remarks>
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
<summary>
	Video capture device.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Devices.VideoCaptureSampleAvailableHandler">
-------------------------------------------------------------------------------------------------
<summary>
	Handler, called when a video capture sample is available.
</summary><param name="sender">
	[in,out] If non-null, the sender.
</param><param name="e">
	[in,out] If non-null, the VideoCaptureEventArgs to process.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="F:StreamCoders.Devices.VideoCaptureEventArgs.Sample">
-------------------------------------------------------------------------------------------------
<summary>
	Contains the sample picture received from the video capture device.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Devices.VideoCaptureEventArgs">
-------------------------------------------------------------------------------------------------
<summary>
	Event arguments containing samples produced by the VideoCaptureDevice class.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.AACEncoder.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Gets decoder specific configuration string. This is used in SDP and other media
	capability description methods to initialize a decoder.
</summary><returns>
	null if it fails, else the decoder configuration information.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.AACEncoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Encodes PCM data to AAC frame and stores it in OutputQueue.
</summary><param name="inputBuffer">
	[in,out] Buffer containing PCM data.
</param><returns>
	.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.AACEncoder.Init(StreamCoders.Encoder.AudioEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes AAC Encoder.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.AACEncoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.AACEncoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.AACEncoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.AACEncoder">
-------------------------------------------------------------------------------------------------
<summary>
	AAC/HE-AAC - MPEG4-Audio Encoder. Supports Low Complexity (LC, LC+SBR) and Long Term
	Prediction (LTP).
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.VideoStabilization.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Transforms the given input buffer.
</summary><remarks>
	If the inputBuffer is an instance of PictureMediaBuffer all necessary metadata like
	resolution will be copied to the newly created object.
</remarks><param name="inputBuffer">
	[in,out] If non-null, buffer for input data.
</param><returns>
	Returns the status of the operation.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.VideoStabilization">
-------------------------------------------------------------------------------------------------
<summary>
	Provides stabilization of video from shaky cameras.
</summary><remarks>
	Note that CPU utilization can be relatively high when using video stabilization. We
	therefore recommend not to use this class in live streaming scenarios.<br /><strong>Video
	stabilization is only available on Windows Vista/7/8</strong>.
</remarks>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.DesktopCapture.SelectCaptureDeviceFormat(StreamCoders.Devices.ScreenCaptureDeviceFormat)">
-------------------------------------------------------------------------------------------------
<summary>
	Select metrics for a previously selected device.
</summary><param name="format">
	[in,out] Pass <c>VideoCaptureDeviceFormat</c> previously returned by <c>SelectDevice</c></param><returns>
	Returns true of metrics are supported, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.DesktopCapture.SelectDevice(StreamCoders.Devices.ScreenCaptureDeviceInformation)">
-------------------------------------------------------------------------------------------------
<summary>
	Selects a capture device to be used and returns metrics of that device.
</summary><param name="device">	A <b>CaptureDeviceInformation</b> object returned by <c>GetDeviceList</c></param><returns>
	Returns a list of metrics supported by the device.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.DesktopCapture.GetDeviceList">
-------------------------------------------------------------------------------------------------
<summary>
	Retrieves a String readable list of all available and compatible Capture Devices on the
	System.
</summary><returns>
	null if it fails, else the device list.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.DesktopCapture.GetNextFrameTo(StreamCoders.PictureMediaBuffer@)">
-------------------------------------------------------------------------------------------------
<summary>
	Captures the next frame from the desktop and stores it in an already created buffer.
</summary></member>
        <member name="M:StreamCoders.Devices.DesktopCapture.GetFrame">
-------------------------------------------------------------------------------------------------
<summary>
	Captures the next frame from the desktop.
</summary></member>
        <member name="T:StreamCoders.Devices.DesktopCapture">
-------------------------------------------------------------------------------------------------
<summary>
	Provides high performance Desktop screen capturing using Desktop Duplication.. 
</summary><remarks><para>This class can currently only be used on Windows 8+ platforms.</para></remarks></member>
        <member name="M:StreamCoders.Decoder.H263Decoder.Predict(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Predicts the given input buffer.%ip%
</summary><param name="inputBuffer">
	[in,out] The frame to decode.
</param><returns>
	.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H263Decoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes the content of the buffer into a uncompressed RGB24 frame and stores it in OutputQueue.
</summary><param name="inputBuffer">	[in,out] The frame to decode. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------
<summary>
	Decodes the given input buffer.%ip%
</summary><param name="inputBuffer">
	[in,out] The frame to decode.
</param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H263Decoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H263Decoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H263Decoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.H263Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	H.263 video decoder <br />
	The H.263 decoder supports baseline profile plus Annexes D, F, G, I, J, M, O, P, S,
	T of the ITU-T Recommendation H.263.<br /></summary><seealso cref="T:StreamCoders.Decoder.AVideoDecoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.OpusEncoder">
-------------------------------------------------------------------------------------------------
<summary>
	Fixed point Opus audio encoder.<br />
	Supported Sampling rates: 8000, 12000, 16000, 24000, or 48000<br />
	Supported number of channels: 1, 2<br />
	The default duration is 20ms.<br />
    Bitrates range from 500 to 512000 bits per second.<br /></summary><remarks>
The Transform function must be called from the same thread the object was created on.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.VP9Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	Google VP9 Decoder. The decoder is still beta and should not be used in production.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.SupportedFormats">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the supported metrics.
</summary><value>
	The supported metrics.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.Supports">
-------------------------------------------------------------------------------------------------
<summary>
	The device capabilities as bitmask.
</summary><value>
	The supports.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.Formats">
-------------------------------------------------------------------------------------------------
<summary>
	Supported Formats.
</summary><remarks>
	See supported input/output formats of encoders/decoders. Most only support 16-bit
	input/input.
</remarks><value>
	The formats.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.DriverVersion">
-------------------------------------------------------------------------------------------------
<summary>
	Driver Version.
</summary><value>
	The driver version.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.ProductId">
-------------------------------------------------------------------------------------------------
<summary>
	The product identification.
</summary><value>
	The identifier of the product.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.ManufacturerId">
-------------------------------------------------------------------------------------------------
<summary>
	The manufacturer identification.
</summary><value>
	The identifier of the manufacturer.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Number of channels supported on that device.
</summary><value>
	Mono/Stereo.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.Index">
-------------------------------------------------------------------------------------------------
<summary>
	Gets zero-based index of this object.
</summary><value>
	The index.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Devices.AudioDeviceInfo.Name">
            <summary>
Name of the device.
</summary>
            <value />
-------------------------------------------------------------------------------------------------
<summary>
	Gets the name.
</summary><value>
	The name.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Devices.AudioDeviceInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Information about the audio device.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Devices.AudioFormat.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
-------------------------------------------------------------------------------------------------
<summary>
	Constructor.
</summary><param name="Freq">	The freqency. </param><param name="Chan">	The number channels. </param><param name="BpS"> 	The bits per sample. </param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Devices.AudioFormat">
-------------------------------------------------------------------------------------------------
<summary>
	Contains necessary values that describe an audio device format.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Devices.WaveDeviceCapabilities">
-------------------------------------------------------------------------------------------------
<summary>
	Bitfield of flags for specifying Wave Device Capabilities.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="F:StreamCoders.Devices.WaveDeviceCapabilities.WaveCapLeftRightVolume">
            <summary>
separate left-right volume control
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveDeviceCapabilities.WaveCapVolume">
            <summary>
supports volume control
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveDeviceCapabilities.WaveCapPlaybackrate">
            <summary>
supports playback rate control
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveDeviceCapabilities.WaveCapPitch">
            <summary>
supports pitch control
</summary>
        </member>
        <member name="T:StreamCoders.Devices.WaveFormats">
-------------------------------------------------------------------------------------------------
<summary>
	Wave formats supported by audio device.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_96S16">
            <summary>
96     kHz, Stereo, 16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_96M16">
            <summary>
96     kHz, Mono,   16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_96S08">
            <summary>
96     kHz, Stereo, 8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_96M08">
            <summary>
96     kHz, Mono,   8-bit 
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_48S16">
            <summary>
48     kHz, Stereo, 16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_48M16">
            <summary>
48     kHz, Mono,   16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_48S08">
            <summary>
48     kHz, Stereo, 8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_48M08">
            <summary>
48     kHz, Mono,   8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_44S16">
            <summary>
44.1   kHz, Stereo, 16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_44M16">
            <summary>
44.1   kHz, Mono,   16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_44S08">
            <summary>
44.1   kHz, Stereo, 8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_44M08">
            <summary>
44.1   kHz, Mono,   8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_2S16">
            <summary>
22.05  kHz, Stereo, 16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_2M16">
            <summary>
22.05  kHz, Mono,   16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_2S08">
            <summary>
22.05  kHz, Stereo, 8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_2M08">
            <summary>
22.05  kHz, Mono,   8-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_1S16">
            <summary>
11.025 kHz, Stereo, 16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_1M16">
            <summary>
11.025 kHz, Mono,   16-bit
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_1S08">
            <summary>
11.025 kHz, Stereo, 8-bit 
</summary>
        </member>
        <member name="F:StreamCoders.Devices.WaveFormats.WaveFormat_1M08">
            <summary>
11.025 kHz, Mono,   8-bit 
</summary>
        </member>
        <member name="T:StreamCoders.Devices.AudioChannel">
-------------------------------------------------------------------------------------------------
<summary>
	Audio speaker channel mask. Combine using logical "OR" to signal presence of channels in
	multichannel stream.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.VorbisEncoder">
-------------------------------------------------------------------------------------------------
<summary>
	Vorbis Audio encoder.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Decoder.SpeechDecoder.StreamType">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets or Sets the StreamType property.
</summary><value>
	Describes the way a stream is packed. This is currently used for AMRNB only.
</value>

### <example><code>
				SpeechDecoder dec = new SpeechDecoder();
				dec.Bitrate = 12200;
				dec.SetCodec(StreamCoders.Codec.AMRNB);
				dec.StreamType = StreamCoders.SpeechStreamType.StorageFormat;  // It's using RFC 3267
				bool initres = dec.Init();
				if(initres == false)
					return;
	
				WaveOutput wout = new WaveOutput();
				wout.BitsPerSample = 16;
				wout.Channels = 1;
				wout.SampleRate = 8000;
				wout.Init();
				wout.OpenDevice();
	
				FileStream ifs = new FileStream("file.amr", FileMode.Open);
				BinaryReader br = new BinaryReader(ifs);
				ifs.Position = 6;
	
				int bytesread = 0;
				bool eof = false;
				int packetMS = 20;
				int packetduration = 32;    // 20ms in octets (AMR 12.2)
	
				byte[] buf = new byte[packetduration];
	
				uint seq = 10;
				int ts = new System.Random(Environment.TickCount).Next();
				while (!eof)
				{
					int startDuration = Environment.TickCount;
					bytesread = br.Read(buf, 0, packetduration);
	
					if (bytesread &lt; packetduration)
						eof = true;
					byte[] samples =  dec.Decode(buf);
	
					if (samples != null)
					{
						wout.Enqueue(samples);
					}
				}
	
				Console.WriteLine("done");
				Console.ReadLine();
	
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.Decode(StreamCoders.Rtp.RtpPacket)">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes.
</summary><param name="packet">	[in,out] If non-null, the packet. </param><returns>
	Returns PCM data, otherwise null in case of insufficient input data.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.Decode(StreamCoders.Rtp.RtpFrame)">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes RTPFrames containing speech data.
</summary><param name="frame">	[in,out] RTP Frame object. </param><returns>
	Returns PCM data, otherwise null in case of insufficient or corrupt input data.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.Decode(System.Byte[],System.Int32,System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes a byte array to PCM.
	 <br />
	 Note: The size of the input data is dependent on the value of
	 MaximumInputDataLength<br /></summary><param name="buffer">	[in,out] Buffer containing speech encoded data stream. </param><returns>
	Returns PCM data, otherwise null in case of insufficient input data.
</returns><example><code>
				class Receiver
				{
					public void Start()
					{
						jitter = new System.Collections.Generic.SortedDictionary&lt;Int32, RtpPacket&gt;();
	
						session = new RTPSession();
						receiver = new RTPReceiver();
						sender = new RTPSender();
						IPEndPoint rtpEp = new IPEndPoint(IPAddress.Parse(StreamCoders.Network.Helper.GetLocalIP()), 23152);
						participant = new RTPParticipant(rtpEp, null, null, null);
						session.NewRTPPacket = NewRTPPacket;
						session.NewRTCPPacket = null;
						receiver.AddParticipant(participant);
						session.AddReceiver(receiver);
	
						decoder = new StreamCoders.Decoder.SpeechDecoder();
						decoder.SetCodec(StreamCoders.Codec.G711A);
						decoder.Bitrate = 64000;
						decoder.Init();
	
						wout = new WaveOutput();
						wout.Channels = 1;
						wout.SampleRate = 8000;
						wout.BitsPerSample = 16;
						wout.Init();
						wout.OpenDevice(null);
	
						decoderThread = new System.Threading.Thread(new System.Threading.ThreadStart(DecoderThread));
						decoderThread.Start();
					}
	
					private void DecoderThread()
					{
						lock (jitter)               // Clear jitter to avoid delays
						{
							jitter.Clear();
						}
						while (true)
						{
							RtpPacket f = CheckJitterForCompleteFrame();
							if (f == null)
							{
								System.Threading.Thread.Sleep(0);
								wout.UnprepareBuffers();
								continue;
							}
	
							byte[] pcm = decoder.Decode(f.DataPointer);
							if (pcm != null)
							{
								wout.Enqueue(pcm);
							}
						}
					}
	
					private bool NewRTPPacket(RtpPacket packet, byte[] rawBuffer)
					{
						AddPacketToJitter(packet);
						return false;
					}
	
					private void AddPacketToJitter(RtpPacket packet)
					{
						if (packet == null)
							return;
						lock (jitter)
						{
							jitter.Add(packet.Timestamp, packet);
						}
					}
	
					private RtpPacket CheckJitterForCompleteFrame()
					{
						lock (jitter)
						{
							foreach (RtpPacket f in jitter.Values)
							{
								jitter.Remove(f.Timestamp);
								return f;
							}
						}
						return null;
					}
	
					private RTPSession session;
					private RTPReceiver receiver;
					private RTPSender sender;
					private RTPParticipant participant;
					private System.Collections.Generic.SortedDictionary&lt;Int32, RtpPacket&gt; jitter;
					private StreamCoders.Decoder.SpeechDecoder decoder;
					private System.Threading.Thread decoderThread;
					private WaveOutput wout;
				}
	
				class Program
				{
					static void Main(string[] args)
					{
						Receiver rec = new Receiver();
						rec.Start();
						Console.ReadLine();
					}
				}
	
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the SpeechDecoder.
</summary><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Decoder.SpeechDecoder.MaximumInputDataLength">
-------------------------------------------------------------------------------------------------
<summary>
	Set/Get the maximum size of the input data in bytes that can be decoded at once.
	<br /></summary><remarks>
	Must be set before initializing encoder.
</remarks><value>
	The length of the maximum input data.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Decoder.SpeechDecoder.Bitrate">
-------------------------------------------------------------------------------------------------
<summary>
	Represents the bitrate the currently selected codec is using.
</summary><value>
	The bitrate.
</value>

### <example><code>
						decoder = new StreamCoders.Decoder.SpeechDecoder();
						decoder.SetCodec(StreamCoders.Codec.G711A);
						decoder.Bitrate = 64000;
						decoder.Init();
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.GetCodec">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the currently selected codec.
</summary><returns>
	The codec.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.SetCodec(StreamCoders.Codec,StreamCoders.Decoder.SpeechDecoderCodecSpecificValue)">
-------------------------------------------------------------------------------------------------
<summary>
	Sets the codec type of the data to be decoded and default frame duration.
</summary><param name="codec">
	The codec to use.
</param><param name="codecSpecificValue">
	Optional codec specific data is currently only used for AMR codec types when RTP is used.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.SetCodec(StreamCoders.Codec)">
-------------------------------------------------------------------------------------------------
<summary>
	Sets the codec type of the data to be decoded and default frame duration. 
</summary><param name="codec">
	The codec to use.
</param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.SpeechDecoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.SpeechDecoder">
-------------------------------------------------------------------------------------------------
<summary>
	SpeechDecoder handles the decoding of speech audio frames.
</summary><remarks><para>SpeechDecoder handles 16-bit sample sizes and 1 channel.</para><para /><para>Supported codecs are:</para><list type="bullet"><item>G711A</item><item>G711U</item><item>G722</item><item>G722SB</item><item>G723</item><item>G726 (Re-amplified)</item><item>G728</item><item>G729A</item><item>AMRNB</item><item>AMRWB</item><item>AMRWBE</item><item>SPEEX NB</item><item>SPEEX WB</item></list></remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.DTSDecoder">
-------------------------------------------------------------------------------------------------
<summary>
	DTS Digital Surround Decoder 
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.OpusDecoder">
-------------------------------------------------------------------------------------------------
<summary>
	Fixed point Opus audio decoder. 
</summary><remarks>
The Transform function must be called from the same thread the object was created on.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MP3Decoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes a raw Mp3 Stream.
</summary><param name="inputBuffer">
	[in,out] Encoded frame with optional timing information.
</param><returns>
	Decoded Frame, including timing information, or null indicating that not enough data was
	supplied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MP3Decoder.Init(StreamCoders.Decoder.AudioDecoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	This initializes the decoder. Call the setter functions before this function.
</summary><returns>
	Returns true when the initialization was successful. Otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MP3Decoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MP3Decoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.MP3Decoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.MP3Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	MP3 Decoder. Produces PCM audio samples from encoded MP3 stream. <br /><br /><list type="bullet"><listheader><description>Supports</description></listheader><item><description>MPEG-1 Layer 1-3</description></item><item><description>MPEG-2 Low Sampling Layer 1-3</description></item><item><description>MPEG-2 Multichannel Extension Layer 2</description></item><item><description>MPEG-2.5 Extra Low Sampling Layer 1-3</description></item></list></summary><seealso cref="T:StreamCoders.Decoder.IAudioDecoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AudioDecoderFactory.CreateDecoder(StreamCoders.Codec)">
-------------------------------------------------------------------------------------------------
<summary>
	Creates a audio decoder object based on codec enumeration value.
</summary><param name="codec">
	The codec to create.
</param><returns>
	Returns a newly created decoder object, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.AudioDecoderFactory">
-------------------------------------------------------------------------------------------------
<summary>
	Creates audio decoder objects based on given critera.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.NoiseReduction.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.NoiseReduction.AttenuateInplace(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Attenuates audio signal based on attenuation level. This function places the results in
	the inputBuffer.
</summary><param name="samples">	[in,out] Input sample Buffer. </param>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.NoiseReduction.Attenuate(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Performs attenuation of noise in signal.
</summary><param name="samples">	[in,out] Input sample Buffer. </param><returns>
	Returns newly created MediaBuffer.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.NoiseReduction.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes NoiseReduction object.
</summary><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.NoiseReduction.Metric">
-------------------------------------------------------------------------------------------------
<summary>
	Contains signal noise information. Currently not used.
</summary><value>
	The metric.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.NoiseReduction.AttenuationLevel">
-------------------------------------------------------------------------------------------------
<summary>
	Noise Attenuation level.
</summary><value>
	The attenuation level.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.NoiseReduction.SampleRate">
-------------------------------------------------------------------------------------------------
<summary>
	Sample rate of input signal.
</summary><value>
	Supported sample rates are: 8000 &amp; 16000.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.NoiseReduction.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.NoiseReduction">
-------------------------------------------------------------------------------------------------
<summary>
	Represents a configurable background noise canceller.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.NoiseMetric">
-------------------------------------------------------------------------------------------------
<summary>
	Noise metric.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.NoiseAttenuationLevel">
-------------------------------------------------------------------------------------------------
<summary>
	Specifies the noise attenuation  level.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="F:StreamCoders.Wave.NoiseAttenuationLevel.Automatic">
            <summary>Automatic adjustment.</summary>
        </member>
        <member name="F:StreamCoders.Wave.NoiseAttenuationLevel.High">
            <summary>39dB</summary>
        </member>
        <member name="F:StreamCoders.Wave.NoiseAttenuationLevel.Normal">
            <summary>16dB</summary>
        </member>
        <member name="F:StreamCoders.Wave.NoiseAttenuationLevel.MediumLow">
            <summary>10dB</summary>
        </member>
        <member name="F:StreamCoders.Wave.NoiseAttenuationLevel.Low">
            <summary>8dB</summary>
        </member>
        <member name="F:StreamCoders.Wave.NoiseAttenuationLevel.None">
            <summary>0dB</summary>
        </member>
        <member name="M:StreamCoders.Decoder.H264DecoderAccelerated.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes the content of the buffer into a uncompressed RGB24 frame. This may also contain
	timing information.
</summary><remarks>
	Not all input frames may deliver a picture immediately. Depending on the composition and
	frame type (B-Frames), frame decoding can be deferred to a later point in time.
</remarks><param name="inputBuffer">	[in,out] If non-null, the media pack. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderAccelerated.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderAccelerated.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderAccelerated.#ctor">
            <summary>
Constructor.
</summary>				
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264Decoder.Predict(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Attempts to predict the frame type by finding the start-code and looking at the NAL unit
	type.
</summary><remarks>
	The function limits search to the first 20 bytes of a buffer. <br />
	If there are multiple NALs passed, then only the first will be identified. In order to
	identify all NALs, use H264Transform.ExtractNals to split them into separate buffers
	first.<br />
	Predict currently only works with start-code escaped NAL units. AU (e.g. VideoSource =
	FILE_MP4) frames are not supported.
</remarks><param name="inputBuffer">
	[in,out] Input buffer.
</param><returns>
	Returns the frame type or NO_FRAME if not found.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264Decoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes the content of the buffer into a uncompressed RGB24 frame. This may also contain
	timing information.
</summary><remarks><para>Not all input frames may deliver a picture immediately. Depending on the
	composition and frame type (B-Frames), frame decoding can be deferred to a later point in
	time.</para><para>In case of packet loss or discontinuities in the decoded stream, for example when
	bitrates are switched in an adaptive streaming scenario, the input buffer
	should set MediaBuffer.IsDiscontinuity = true;</para></remarks><param name="inputBuffer">
	If non-null, the media pack.
</param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.H264Decoder">
            <summary>
                <para>H.264 Decoder (ISO 14496-10).</para>
            </summary>
            <seealso cref="T:StreamCoders.Decoder.AVideoDecoderBase" />
        </member>
        <member name="M:StreamCoders.Rtp.SRtpSession.UnProtect(StreamCoders.Rtp.RtcpCompoundPacket@)">
-------------------------------------------------------------------------------------------------
<summary>
	Un-Protects an RTCP compound packet.
</summary><param name="inputRaw">
	[in,out] [in,out] Must contain a valid RTCP compound packet. If the un-protection process is successful, the output will be a newly created RTCP compound packet.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.UnProtect(StreamCoders.Rtp.RtpPacket@)">
-------------------------------------------------------------------------------------------------
<summary>
	Un-Protects an RTP packet.
</summary><param name="inputRaw">
	[in,out] [in,out] Must contain a valid RTP packet. If the un-protection process is successful, the output will be a newly created RTP packet.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.UnProtect(StreamCoders.OffsetBuffer`1{System.Byte}@,System.Boolean)">
-------------------------------------------------------------------------------------------------
<summary>
	Un-Protects RTP and RTCP content. If the function is successful, the referenced input
	parameter will be replaced by a new OffsetBuffer object.
</summary><param name="inputRaw">
	[in,out] [in,out] Must contain a valid RTP packet or RTCP compound packet. If the un-protection process is
	successful, the output will be a newly created RTP packet or RTCP compound packet.
</param><param name="isRtcp">
	True if the passed packet is an RTCP packet. False if the passed packet is an RTP packet.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.Protect(StreamCoders.Rtp.RtcpCompoundPacket@)">
-------------------------------------------------------------------------------------------------
<summary>
	Protects an RTCP compound packet.
</summary><param name="inputRaw">
	[in,out] [in,out] Must contain a valid RTCP compound packet. If the protection process is successful, the output will be a newly created RTCP compound packet.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.Protect(StreamCoders.Rtp.RtpPacket@)">
-------------------------------------------------------------------------------------------------
<summary>
	Protects an RTP packet.
</summary><param name="inputRaw">
	[in,out] [in,out] Must contain a valid RTP packet. If the protection process is successful, the output will be a newly created RTP packet.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.Protect(StreamCoders.OffsetBuffer`1{System.Byte}@,System.Boolean)">
-------------------------------------------------------------------------------------------------
<summary>
	Protects RTP and RTCP content. If the function is successful, the referenced input
	parameter will be replaced by a new OffsetBuffer object.
</summary><param name="packet">
	[in,out] [in,out] Must contain a valid RTP packet or RTCP compound packet. If the protection process is
	successful, the output will be a newly created RTP packet or RTCP compound packet.
</param><param name="isRtcp">
	True if the passed packet is an RTCP packet. False if the passed packet is an RTP packet.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.RemoveStream(StreamCoders.Rtp.SRtpStreamConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Removes the stream described by streamConfiguration.
</summary><param name="streamConfiguration">
	The stream configuration to remove.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns><remarks>
Note that only stream added with <c>SynchronizationSourceType</c> equal to <c>Specific</c> can be removed from a session. The <c>SynchronizationSourceType</c><c>OutboundAny</c> wildcard can only be added and never removed.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Rtp.SRtpSession.AddStream(StreamCoders.Rtp.SRtpStreamConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Adds a stream to the session.
</summary><param name="streamConfiguration">
	The stream configuration to add.
</param><returns>
	Returns <c>StatusOk</c> on success.
</returns><remarks>
An SRTP session can manage an unlimited number of streams.
</remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Rtp.SRtpSession">
-------------------------------------------------------------------------------------------------
<summary>
	Represents an SRTP session which provides a secure facility for RTP communication.
</summary><remarks><para>An SRTP session can contain multiple streams with indiviual crypto suites and key
	exchange methods.</para><para>Each stream is considered an RTP/RTCP pair, with their own key definition. The
	sender always defines the methods of encryption. The signaling is usually SDP
	(SDES).</para><para>Please see the <c>SRtpSample</c> on how to use this class.</para><para>This class is thread-safe.</para></remarks>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.VP9Encoder">
-------------------------------------------------------------------------------------------------
<summary>
	Google VP9 Encoder. The encoder is still beta and should not be used in production.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.VP8Encoder.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes this VP8Encoder.
</summary><param name="configuration">
	The configuration.
</param><returns>
	nullptr if it fails, else a VideoEncoderConfiguration.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.VP8Encoder">
-------------------------------------------------------------------------------------------------
<summary>
	Google VP8 Encoder
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H265Encoder.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Provides SPS/PPS configuration data for decoders.
</summary><remarks>
	This function will only return valid data after the first frame was successfully encoded.
</remarks><returns>
	Returns buffer containing information, otherwise null if information is not yet available.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.H265Encoder.LastEncodedFrameType">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the FrameType of the most recently encoded Frame.
</summary><value>
	The type of the last encoded frame.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H265Encoder.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the H.264 encoder instance.
</summary><remarks>
	The encoder supports updating its bitrate settings by calling Init() during operation for
	all rate control types.
</remarks><param name="configuration">
	The configuration to use.
</param><returns>
	nullptr if it fails, else an updated version of the passed configuration. The
	initialization result is contained in <c>InitializationStatus</c></returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264Encoder.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Provides SPS/PPS configuration data for decoders.
</summary><remarks>
	This function will only return valid data after the first frame was successfully encoded.
</remarks><returns>
	Returns buffer containing information, otherwise null if information is not yet available.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264Encoder.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the H.264 encoder instance.
</summary><remarks>
	The encoder supports updating its bitrate settings by calling Init() during operation for
	all rate control types.
</remarks><param name="configuration">
	The configuration to use.
</param><returns>
	nullptr if it fails, else an updated version of the passed configuration. The
	initialization result is contained in <c>InitializationStatus</c></returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264Encoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264Encoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264Encoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.MPEG4Encoder.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes this MPEG4Encoder instance.
</summary><param name="configuration">
	The configuration to use.
</param><returns>
	nullptr if it fails, else an updated version of the passed configuration. The
	initialization result is contained in <c>InitializationStatus</c></returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.MPEG4Encoder">
-------------------------------------------------------------------------------------------------
<summary>
	MPEG-4.2 Encoder. <br />
	Streamcoders MPEG-4 Encoder is an ISO/IEC 14496-2 conforming encoder. <br /><list type="bullet"><listheader><description>Supported Features</description></listheader><item><description>Data partitioning</description></item><item><description>Reversible VLC</description></item><item><description>Constant/Variable Bitrates</description></item><item><description>Interlacing</description></item><item><description>Motion Estimation method: Full, Fast; Accuracy: Full, Half, Quarter;
	Vectors: 1, 4</description></item><item><description>Support for I/P/B-Frames</description></item></list>
	The Encoder is also able to output RFC 3016 conforming RTP frames, with packet size
	restrictions.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H263Encoder.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the decoder configuration information.
</summary><returns>
	null if it fails, else the decoder configuration information.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H263Encoder.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes this H263Encoder instance.
</summary><param name="configuration">
	The configuration to use.
</param><returns>
	nullptr if it fails, else an updated version of the passed configuration. The
	initialization result is contained in <c>InitializationStatus</c></returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H263Encoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H263Encoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H263Encoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.H263Encoder">
-------------------------------------------------------------------------------------------------
<summary>
	H.263 video Encoder
	<br />
	Currently H.263 encoder supports baseline profile plus Annexes D, F, G, I, J, M, O, P, S,
	T of the ITU-T Recommendation H.263.
	<br />
	In additional to un-encapsulated (raw) data, the Encoder is able to produce RFC 2190, RFC
	2429, RFC 4629 RTP frames. <br /></summary><seealso cref="T:StreamCoders.Encoder.APVideoEncoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:UMC.ParamList.getValue(System.Char!System.Runtime.CompilerServices.IsConst*)">
\overload
    \return UMC_OK if the option is met. UMC_WRN_TYPE_MISMATCH if it has arguments.
    UMC_ERR_NOT_FOUND if there was no such option

</member>
        <member name="M:UMC.ParamList.getValue(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*,System.Int32)">
\overload

</member>
        <member name="M:StreamCoders.Encoder.VideoEncoderFactory.CreateEncoder(StreamCoders.Codec)">
-------------------------------------------------------------------------------------------------
<summary>
	Creates a video encoder object based on codec enumeration value.
</summary><param name="codec">
	The codec to create.
</param><returns>
	Returns a newly created encoder object, otherwise null.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.VideoEncoderFactory">
-------------------------------------------------------------------------------------------------
<summary>
	Creates video encoder objects based on given critera.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.VP8Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	Google VP8 Decoder
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Container.AVIReader.Tracks">
-------------------------------------------------------------------------------------------------
<summary>
	Gets or sets the tracks found in the container.
</summary><value>
	The tracks in the container.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Container.AVIReader.Position">
-------------------------------------------------------------------------------------------------
<summary>
	Get/Set the current position within a file in time Units.
</summary><value>
	The current position.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.GetTrackStatus(StreamCoders.TrackInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the track status.
</summary><param name="track">
	The track to get the status for.
</param><returns>
	The track status.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.GetNextFrame(StreamCoders.TrackInfo)">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the next data from a track.
</summary><param name="track">
	If non-null, the track.
</param><returns>
	null if it fails, else the next frame.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.Init(System.IO.Stream)">
-------------------------------------------------------------------------------------------------
<summary>
	Not supported. Use Init(string) instead.
</summary><param name="stream">
	If non-null, the stream.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.Init(System.String)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes Reader.
</summary><param name="FileName">
	Filename of the file.
</param><returns>
	Returns true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Container.AVIReader.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Container.AVIReader">
-------------------------------------------------------------------------------------------------
<summary>
	The AVI file reader supports reading audio and video frames from an AVI container.
</summary><seealso cref="T:StreamCoders.IReader" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:UMC.FileReader.GetSize">
return file_size
</member>
        <member name="M:UMC.FileReader.GetPosition">
return position in the stream
</member>
        <member name="M:UMC.FileReader.SetPosition(System.Double)">
Set position
\param pos Ipp64f (0:1.0)
\retval OK
\note set position in the stream (file size * pos)

</member>
        <member name="M:UMC.FileReader.MovePosition(System.UInt64)">
Move position on npos bytes
\param npos          integer (+/-) bytes
\retval UMC_OK
\retval UMC_ERR_NOT_INITIALIZED object was not initialize

</member>
        <member name="M:UMC.FileReader.ReadData(System.Void*,System.UInt32*)">
Read nsize bytes and copy to data (return number bytes which was copy)
Cache data in case of small nsize
\param data          pointer to the data where copy nsize byte from stream
\param nsize         integer - number bytes
\retval UMC_OK
\retval UMC_ERR_NOT_INITIALIZED object was not initialize
\retval UMC_ERR_END_OF_STREAM   end of stream
\retval UMC_ERR_FAILED          can't map

</member>
        <member name="M:UMC.FileReader.Reset">
Reset all internal parameters
\retval UMC_OK
\retval UMC_ERR_NOT_INITIALIZED             object was not initialize

</member>
        <member name="M:UMC.FileReader.Close">
Close file
\retval UMC_OK

</member>
        <member name="M:UMC.FileReader.Init(UMC.DataReaderParams*)">
Create and map first portion from file
\param InitParams Pointer to the init (for filereader it's vm_char file_name[255] and portion_size
\retval UMC_OK
\retval UMC_ERR_OPEN_FAILED       file was not open
\retval UMC_ERR_INIT              wrong page size

</member>
        <member name="M:UMC.FileReaderParams.#ctor">
Default constructor
        Sets m_file_name to empty string and m_portion_size to 0

</member>
        <member name="M:UMC.DataReader.SetPosition(System.UInt64)">
Set new position
</member>
        <member name="M:UMC.DataReader.SetPosition(System.Double)">
Set new position
</member>
        <member name="M:UMC.DataReader.GetSize">
Obtain size in source data
</member>
        <member name="M:UMC.DataReader.GetPosition">
Obtain position in the stream
</member>
        <member name="M:UMC.DataReader.CacheData(System.Void*,System.UInt32*,System.Int32)">
Cache and check data
</member>
        <member name="M:UMC.DataReader.CheckData(System.Void*,System.UInt32*,System.Int32)">
Check data
</member>
        <member name="M:UMC.DataReader.Check32u(System.UInt32*,System.UInt32)">
Check Ipp32u value
</member>
        <member name="M:UMC.DataReader.Check16u(System.UInt16*,System.UInt32)">
Check Ipp16s value
</member>
        <member name="M:UMC.DataReader.Check8u(System.Byte*,System.UInt32)">
Check byte value
</member>
        <member name="M:UMC.DataReader.MovePosition(System.UInt64)">
Move position on npos bytes
</member>
        <member name="M:UMC.DataReader.ReadData(System.Void*,System.UInt32*)">
Read nsize bytes and copy to data (return number bytes which was copy).
Cache data in case of small nsize

</member>
        <member name="M:UMC.DataReader.GetData(System.Void*,System.UInt32*)">
Get data
</member>
        <member name="M:UMC.DataReader.Get8u(System.Byte*)">
Return 1 byte
</member>
        <member name="M:UMC.DataReader.Get64uNoSwap(System.UInt64*)">
Return 8 bytes without swap
</member>
        <member name="M:UMC.DataReader.Get64uSwap(System.UInt64*)">
Return 8 bytes
</member>
        <member name="M:UMC.DataReader.Get32uNoSwap(System.UInt32*)">
Return 4 bytes without swap
</member>
        <member name="M:UMC.DataReader.Get32uSwap(System.UInt32*)">
Return 4 bytes
</member>
        <member name="M:UMC.DataReader.Get16uNoSwap(System.UInt16*)">
Return 2 bytes without swap
</member>
        <member name="M:UMC.DataReader.Get16uSwap(System.UInt16*)">
Return 2 bytes
</member>
        <member name="M:UMC.DataReader.Reset">
Reset all internal parameters to start reading from begin
</member>
        <member name="M:UMC.DataReader.Close">
Close source data
</member>
        <member name="M:UMC.DataReader.Init(UMC.DataReaderParams*)">
Initialization abstract source data
</member>
        <member name="M:UMC.DataReader.Dispose">
Destructor
</member>
        <member name="M:UMC.DataReader.#ctor">
Default constructor
</member>
        <member name="M:UMC.DataReaderParams.Dispose">
Destructor
</member>
        <member name="M:UMC.DataReaderParams.#ctor">
Default constructor
</member>
        <member name="M:StreamCoders.Imaging.FaceDetector.Detect(StreamCoders.PictureMediaBuffer)">
-------------------------------------------------------------------------------------------------
<summary>
	Attempts to detect faces in PictureMediaBuffer.
</summary></member>
        <member name="T:StreamCoders.Imaging.FaceDetector">
-------------------------------------------------------------------------------------------------
<summary>
	A Face detector using Histogram of oriented gradients and linear classifier
</summary><remarks>
	Note that a AVX2 capable CPU is required in order to use FaceDetector
</remarks></member>
        <member name="T:StreamCoders.Decoder.VorbisDecoder">
-------------------------------------------------------------------------------------------------
<summary>
	Vorbis Audio decoder.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderAccelerated.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Provides SPS/PPS configuration data for decoders.
</summary><remarks>
	This function will only return valid data after the first frame was successfully encoded.
</remarks><returns>
	Returns buffer containing information, otherwise null if information is not yet available.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.H264EncoderAccelerated.LastEncodedFrameType">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the FrameType of the most recently encoded Frame.
</summary><value>
	The type of the last encoded frame.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderAccelerated.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the H.264 encoder instance.
</summary><remarks>
	The encoder supports updating its bitrate settings by calling Init() during operation for
	all rate control types.
</remarks><param name="configuration">
	The configuration to use.
</param><returns>
	nullptr if it fails, else an updated version of the passed configuration. The
	initialization result is contained in <c>InitializationStatus</c></returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderAccelerated.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderAccelerated.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AC3Decoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes an AC3 Stream with optional timing information.
</summary><param name="inputBuffer">	[in,out]. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AC3Decoder.Init(StreamCoders.Decoder.AudioDecoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	This initializes the decoder. Call the setter functions before this function.
</summary><returns>
	Returns true when the initialization was successful. Otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AC3Decoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AC3Decoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AC3Decoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.AC3Decoder">
-------------------------------------------------------------------------------------------------
<summary>
	AC-3 Dolby Digital Decoder.
</summary><seealso cref="T:StreamCoders.Decoder.IAudioDecoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.WMAProEncoder.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Gets decoder specific configuration string. This is used in SDP and other media
	capability description methods to initialize a decoder.
</summary><returns>
	null if it fails, else the decoder configuration information.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.WMAProEncoder.Init(StreamCoders.Encoder.AudioEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes WMA Pro Encoder.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderSoftware.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes the content of the buffer into a uncompressed RGB24 frame. This may also contain
	timing information.
</summary><remarks>
	Not all input frames may deliver a picture immediately. Depending on the composition and
	frame type (B-Frames), frame decoding can be deferred to a later point in time.
</remarks><param name="inputBuffer">	[in,out] If non-null, the media pack. </param><returns>
	null if it fails, else.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderSoftware.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderSoftware.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.H264DecoderSoftware.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.H264DecoderSoftware">
-------------------------------------------------------------------------------------------------
<summary>
	H.264 Decoder (ISO 14496-10).
</summary><seealso cref="T:StreamCoders.Decoder.AVideoDecoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AACDecoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Decodes AAC frame to PCM and stores out of operation in OutputQueue.
</summary><param name="inputBuffer">
	[in,out] AAC frame.
</param><returns>
	Returns status of the transform operation.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.AACDecoder.Init(StreamCoders.Decoder.AudioDecoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	This initializes the decoder. Call the setter functions before this function.
</summary><returns>	Returns true when the initialization was successful. Otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.AACDecoder">
-------------------------------------------------------------------------------------------------
<summary>
	AAC - MPEG-4.3 Audio Decoder. <br />
	Supported Profiles: LC, MAIN, LTP, ALS<br />
	Extensions: SBR (HE-AAC v1), PS (HE-AAC v2)<br />
	Frequencies: 8k-96k <br /><br />
	The decoder will auto-detect ADIF and ADTS streams. (For ADIF it is important that the
	first frame produced by the encoder is also passed to the decoder). <br /></summary><remarks>
When <c>Raw</c> stream are used, the decoder must be initialized with decoder specific data from the <c>AacAudioDecoderConfiguration</c> instance.

</remarks><seealso cref="T:StreamCoders.Decoder.IAudioDecoderBase" />
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.Resampler.Output">
-------------------------------------------------------------------------------------------------
<summary>
	Output configuration of audio samples.
</summary><value>
	Parameters used to configure parameters for audio output.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.Resampler.Input">
-------------------------------------------------------------------------------------------------
<summary>
	Input configuration of audio samples.
</summary><value>
	Use this class to set your parameters for the audio data to be resampled.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.Resampler.Resample(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Resamples the given buffer.
</summary><param name="buffer">
	The buffer.
</param><returns>
	nullptr if it fails, else a MediaBuffer&lt;Byte&gt;^.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.Resampler.Resample(StreamCoders.OffsetBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Resamples audio data.
</summary><param name="buffer">
	 Input buffer containing samples specified by <c>Resampler.Input</c> parameters.
</param><returns>
	Returns a buffer of resampled data, specified by <c>Resampler.Output</c> parameters.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.Resampler.Init">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes Resampler.
</summary><exception cref="N:System">	Thrown when a system error condition occurs. </exception><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.Resampler.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finalizer.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.Resampler.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.Resampler.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.Resampler">
-------------------------------------------------------------------------------------------------
<summary>
	Resampler.NET is able to upsample and downsample your audio stream. <br />
	Simply provide input and output parameters and call Resample on the audio data you need
	to transform.
</summary><remarks>
Note that Resampler cannot merge multiple audio channels. To achieve this <c>AudioDeinterleaver</c> should be used beforehand.
This means that the number of input and output channels must be equal.
</remarks><example><code>
	 Resampler resamp = new Resampler();
	 resamp.Input.SampleRate = win.SampleRate;
	 resamp.Output.SampleRate = wout.SampleRate;
	 resamp.Init();
	
	 win.ClearBuffers();
	
	 while(true)
	 {
		if (win.SamplesAvailable == true)
		{
			// get all queued data from device
			byte[] samples = win.GetAllData();
	
			byte[] newsamples = resamp.Resample(samples);
	
			// feed back to device
			wout.Enqueue(newsamples);
		}
	 }
	</code></example>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.AudioConfig.Channels">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the number of channels of the audio data. 
</summary><value>
	Default: 1.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.AudioConfig.BitsPerSample">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the bits per sample of the audio data. Currently all samples must be 16 bit.
</summary><value>
	Default: 16.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Wave.AudioConfig.SampleRate">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the Sample rate of the audio data.
</summary><value>
	The sample rate.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.AudioConfig.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.AudioConfig">
-------------------------------------------------------------------------------------------------
<summary>
	Is used by Resampler.NET to provide Input/Output information.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderSoftware.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Provides SPS/PPS configuration data for decoders.
</summary><remarks>
	This function will only return valid data after the first frame was successfully encoded.
</remarks><returns>
	Returns buffer containing information, otherwise null if information is not yet available.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="P:StreamCoders.Encoder.H264EncoderSoftware.LastEncodedFrameType">
-------------------------------------------------------------------------------------------------
<summary>
	Gets the FrameType of the most recently encoded Frame.
</summary><value>
	The type of the last encoded frame.
</value>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderSoftware.Init(StreamCoders.Encoder.VideoEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes the H.264 encoder instance.
</summary><remarks>
	The encoder supports updating its bitrate settings by calling Init() during operation for
	all rate control types.
</remarks><param name="configuration">
	The configuration to use.
</param><returns>
	nullptr if it fails, else an updated version of the passed configuration. The
	initialization result is contained in <c>InitializationStatus</c></returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderSoftware.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderSoftware.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.H264EncoderSoftware.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.H264EncoderSoftware">
-------------------------------------------------------------------------------------------------
<summary>
	ISO/IEC 14996 Part 10 (H.264/AVC/MPEG4.10) Implementation <br /></summary><remarks>
	The encoder supports forcing an I-Frame by setting MediaBuffer.IsKeyFrame to true on the
	input buffer.
</remarks>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.MP3Encoder.GetDecoderConfigurationInfo">
-------------------------------------------------------------------------------------------------
<summary>
	Gets decoder specific configuration string. This function is currently not support for
	MP3Encoder class.
</summary><returns>
	null if it fails, else the decoder configuration information.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.MP3Encoder.Init(StreamCoders.Encoder.AudioEncoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes MP3 Encoder.
</summary><returns>
	Return true on success, otherwise false.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.MP3Encoder.Finalize">
-------------------------------------------------------------------------------------------------
<summary>
	Finaliser.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.MP3Encoder.Dispose">
-------------------------------------------------------------------------------------------------
<summary>
	Destructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Encoder.MP3Encoder.#ctor">
-------------------------------------------------------------------------------------------------
<summary>
	Default constructor.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Encoder.MP3Encoder">
-------------------------------------------------------------------------------------------------
<summary>
	MP3 Encoder. Compresses PCM to MPEG Audio.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.WMAProDecoder">
-------------------------------------------------------------------------------------------------
<summary>
	WMA Pro audio decoder.
</summary>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.WMADecoder.Transform(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>	Decodes a WMA frame. </summary><param name="inputBuffer">	[in,out] Encoded frame with optional timing information. </param><returns>
	Decoded Frame, including timing information, or null indicating that not enough data was
	supplied.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Decoder.WMADecoder.Init(StreamCoders.Decoder.AudioDecoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	This initializes the decoder. Call the setter functions before this function.
</summary><returns>	Returns true when the initialization was successful. Otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Decoder.WMADecoder">
-------------------------------------------------------------------------------------------------
<summary>
	WMA audio decoder.
</summary>

-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.VoiceActivityDetection.Detect(StreamCoders.MediaBuffer`1{System.Byte})">
-------------------------------------------------------------------------------------------------
<summary>
	Attempts to detect voice activity in audio samples. The minimum input duration is 20ms.
</summary><param name="inputBuffer">
	 Input buffer containing PCM data.
</param><returns>
	The VoiceActivityStatus.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="M:StreamCoders.Wave.VoiceActivityDetection.Init(StreamCoders.Decoder.AudioDecoderConfiguration)">
-------------------------------------------------------------------------------------------------
<summary>
	Initializes VoiceActivityDetection. 
</summary><param name="configuration">
	Any derivation of AudioDecoderConfiguration is accepted. BitsPerSample, SampleRate and
	Channels must be set.
</param><returns>
	true if it succeeds, false if it fails.
</returns>
-------------------------------------------------------------------------------------------------
</member>
        <member name="T:StreamCoders.Wave.VoiceActivityDetection">
-------------------------------------------------------------------------------------------------
<summary>
	Ability to detect voice given PCM input samples with a minimum duration of 20ms. <br />
	Supported sample rates are: 8000, 16000, 24000, 44100, 48000. <br />
	Supported number of channels: 1, 2 <br /></summary>
-------------------------------------------------------------------------------------------------
</member>
    </members>
</doc>